/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 08 12:22:11 GMT 2022
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Subject_FaultRevealing2_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Subject.StrUtils.parseBool("no", false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Subject.StrUtils.parseBool("off|n/yA?:aVW`d", true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Subject.StrUtils.parseBool("false", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Subject.StrUtils.parseBool("yes-,[,] or & are not allowed in-conjunction with other delimiters ", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Subject.StrUtils.parseBool("l\"", true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Subject.StrUtils.parseBool("trueonserchString", true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Subject.StrUtils.parseBool("on", false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Subject.StrUtils.parseBool((String) null, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Subject.StrUtils.parseBoolean("Tc0ur)QRm0Zv");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Subject.StrUtils.parseBoolean("tH.:Y*Z>tT~Z<us@");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Subject.StrUtils.parseBoolean("1");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Subject.StrUtils.parseBoolean(")>");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Subject.StrUtils.parseBoolean("");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitSmart("eHUI4R;.Q4ue/T97X90", 'x');
      Subject.StrUtils.toLower(list0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Subject.StrUtils.splitWS("og&l+Eee8&\t,!b;", true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Subject.StrUtils.splitWS("\t", true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Subject.StrUtils.splitFileNames((String) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Subject.StrUtils.splitFileNames(" *=<nN_Rgo@d");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitWS("l\"", true);
      Subject.StrUtils.splitSmart("l\"", '<', list0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject.StrUtils.splitSmart("' and \" are not dllowed as d:l\"miters", 'w', (List<String>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Subject.StrUtils.splitSmart("", '|', true);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Subject.StrUtils.splitSmart("\"qmr6qae", 'X', false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Subject.StrUtils.split(",S~B~V>}]LUYUq", 'I');
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Subject.StrUtils.split("ZVQj447)W8Rp#S", 'X');
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[6];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(subject_PrimUtils_IntComparator0).lessThan(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort(1, 8, intArray0, subject_PrimUtils_IntComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-2237), (-2227), intArray0, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2237 out of bounds for length 2
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-1371), 2946, (int[]) null, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[9];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(subject_PrimUtils_IntComparator0).lessThan(anyInt() , anyInt());
      Subject.PrimUtils.sort(1, 8, intArray0, subject_PrimUtils_IntComparator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[9];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false, false).when(subject_PrimUtils_IntComparator0).lessThan(anyInt() , anyInt());
      Subject.PrimUtils.sort(1, 8, intArray0, subject_PrimUtils_IntComparator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      Subject.Progressable subject_Progressable0 = mock(Subject.Progressable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      subject_HeapSort0.sort(subject_IndexedSortable0, (-3081), 4164, subject_Progressable0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn(120, 0, 3696, (-1), 3696).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      subject_HeapSort0.sort(subject_IndexedSortable0, 0, 4913);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn(120, 4913, (-1), 0, (-58)).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      // Undeclared exception!
      subject_HeapSort0.sort(subject_IndexedSortable0, 0, 4913);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("3-kwL-P");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3-kwL-P\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("'^WbrM`rYkD7m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'^WbrM`rYkD7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("w0.<;!;0sZd>M");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"w0.<;!;0sZd>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("comp5111.assignment.cut.Subject$Check");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"comp5111.assignment.cut.Subject$Chec\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("G<4:<V^OkF,gK");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"G<4:<V^OkF,g\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(344);
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      integerArray0[2] = integerArray0[0];
      integerArray0[3] = integerArray0[1];
      List<Integer> list0 = List.of(integerArray0);
      String string0 = Subject.StringUtils.join((String) null, list0);
      assertEquals("344null344null344null344", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine("offl\"");
      assertEquals("offl\"", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("E\"", "bqDC]x}j)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[27];
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("e4$", stringArray0[6]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("0|*", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase((String) null, "0|*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("", "");
      String string0 = Subject.StringUtils.join(stringArray0, "");
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = Subject.StringUtils.join(stringArray0, "&bO<2}y");
      assertEquals("null&bO<2}ynull", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Subject.StringUtils.join((String[]) null, ">eh");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Subject.StringUtils.replace(",)u", ",)u", "false", 1969);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("Xii%", "Xii%", "Xii%", (-1));
      assertEquals("Xii%", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("*s]B\n.&ll|Z)\"", "*s]B\n.&ll|Z)\"", "'", 14);
      assertEquals("'", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("*s]B\n.&ll|Z)\"", "*s]B\n.&ll|Z)\"", "'", (int) '\u0000');
      assertEquals("*s]B\n.&ll|Z)\"", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("Xii%", "on,)u", (String) null, (-1));
      assertEquals("Xii%", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("6. r>", "", "offl\"", 78);
      assertEquals("6. r>", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Subject.StringUtils.replaceOnce("", "", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = ",)u";
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, ",)u");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[27];
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, " *=\nNRgo@d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("Bl3tw^b'F", "...");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("qNSq8", "offl\"");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("o1R", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("ejnQ", "'UA");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("Q", "\"w4Pi2N");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("CQ)*j", ")");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("no", (String) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("Vt>~X<n&J4{u", "Vt>~X<n&J4{u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("]}tMI", "]}tMI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("[", "[");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 20
         // \"[^\"]*\"|'[^']*'|[^[]+
         //                     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("6v,ol/:-nf|&Q", "f]_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split(",hWg{P2%nJ\"\"8]", "no");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("'y", "U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("", "eJoX0*EnKds:bO=\"d;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("C*kZP sv5*e~7<", "\"Ih\"@/cV");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      String string0 = Subject.StringUtils.trimEnd("'", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = Subject.StringUtils.trimEnd("Vt>~", charArray0);
      assertEquals("Vt>~", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("'f ]#_", '_');
      assertEquals("'f ]#", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("<PBQ", 'i');
      assertEquals("<PBQ", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("", '\'');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("-,[,] or & are not allowed in-conjunction with other delimiters ");
      assertEquals("-,[,] or & are not allowed in-conjunction with other delimiters", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("JB");
      assertEquals("JB", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[5] = 'U';
      String string0 = Subject.StringUtils.trimBegin("U1?w{iPCGJ9F", charArray0);
      assertEquals("1?w{iPCGJ9F", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = Subject.StringUtils.trimBegin("U1?w{iPCGJ9F", charArray0);
      assertEquals("U1?w{iPCGJ9F", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = Subject.StringUtils.trimBegin("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("onejnQ", 'I');
      assertEquals("onejnQ", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("I", 'I');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Subject.StringUtils.pad("off8", 2784, false);
      String string1 = Subject.StringUtils.trimBegin(string0);
      assertEquals("off8", string1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin(">eh");
      assertEquals(">eh", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("&4yXYkp,[#`36Oke+");
      assertEquals("4yXYkp,[#`36Oke+", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("Ca\"&Y(`/ov&[F");
      assertEquals("Ca\"Y(`/ov[F", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("zK&");
      assertEquals("zK&", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("6v,ol/:-nf|&Q");
      assertEquals("6v,ol/:-nf|Q", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("zK&");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("1JZ[C*jNr&rC");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("\t");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("Q(7");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("-UR}ySJ8WbUiCsv ", (-1));
      assertEquals("-UR}ySJ8Wb...", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("7Pq,c", 3326);
      assertEquals("7Pq,c", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString((String) null, (-2482));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must not be false
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("", "");
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) stringArray0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         //  must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Subject.Check.notNullOrEmpty(objectArray0, "");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // argument must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Subject.Check.notNullOrEmpty("ZVQj447)W8Rp#S", "|n/yA");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notEmpty("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Subject.Check.notEmpty("t|fP>_", "t|fP>_");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Subject.Check.notEmpty(stringArray0[3], (String) null);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.trimEnd((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // s must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = Subject.BooleanUtils.toString(boolean0, "z6F2Hj", "-,[,] or & are not allowed in-conjunction with other delimiters ", "-,[,] or & are not allowed in-conjunction with other delimiters ");
      assertEquals("-,[,] or & are not allowed in-conjunction with other delimiters ", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Subject.BooleanUtils.toString((Boolean) null, "'d no", "...", "Bl3tw^b'F");
      assertEquals("Bl3tw^b'F", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String string0 = Subject.BooleanUtils.toString(boolean0, "z6F2Hj", "-,[,] or & are not allowed in-conjunction with other delimiters ", "-,[,] or & are not allowed in-conjunction with other delimiters ");
      assertEquals("z6F2Hj", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("UTF-8");
      int int0 = Subject.BooleanUtils.toInteger(boolean0, (-367), 92, (-367));
      assertEquals(92, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger((Boolean) null, 0, 0, 3774);
      assertEquals(3774, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true, 1589, 826);
      assertEquals(1589, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false, 1019, 1019);
      assertEquals(1019, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject("l!G", "off", "e", "off");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("YfR", "...", "...", "YfR");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("CQ)+*", "T+n|n%W@nk9,w(", "CQ)+*", "CQ)+*");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((String) null, "e4$", "qBSMFtCXB$Hk` t`N", "V:RvF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, "", (String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, (String) null, (String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, "e4$", "qBSMFtCXB$Hk` t`N", (String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("0|*", "0|*", "0", "/:;.,%#");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("s&9F");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("f ]#_");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("',)u");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("off");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("of8");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("ODf");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("yes");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("Na");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("no");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("Of");
      assertNull(boolean0);
  }
}
