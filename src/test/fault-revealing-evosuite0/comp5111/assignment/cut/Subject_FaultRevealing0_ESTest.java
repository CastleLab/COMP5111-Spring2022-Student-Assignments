/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 08 12:15:58 GMT 2022
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Subject_FaultRevealing0_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Subject.StrUtils.parseBool("no", false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Subject.StrUtils.parseBool("offstridgToSBiplit", true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Subject.StrUtils.parseBool("false", false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Subject.StrUtils.parseBool("yess", false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Subject.StrUtils.parseBool("on", false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Subject.StrUtils.parseBool("true", false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Subject.StrUtils.parseBool("~h x=NwA", false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Subject.StrUtils.parseBool((String) null, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Subject.StrUtils.parseBoolean("The Integer did not match either specified value");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Subject.StrUtils.parseBoolean("t`");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Subject.StrUtils.parseBoolean("1Px=lb<ics2V");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Subject.StrUtils.parseBoolean(".au&0G");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Subject.StrUtils.parseBoolean("");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitFileNames("a2=aILjJ:uSm");
      Subject.StrUtils.toLower(list0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Subject.StrUtils.splitWS("H}- ", false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Subject.StrUtils.splitWS("=7N\t^-s'\"+Iw@", true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Subject.StrUtils.splitWS("\n7O_nPhDZ4u_5", true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Subject.StrUtils.splitFileNames((String) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitFileNames("ST6xP3A2/:$4yj@c");
      Subject.StrUtils.splitSmart("+L@Bxt'v", '', list0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Subject.StrUtils.splitSmart("\"Q$(yzx>OdU", '(', true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitWS("\\(?=,)", true);
      Subject.StrUtils.splitSmart("J+_2'%Y'jn*X", ' ', list0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Subject.StrUtils.splitSmart("", '~', true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Subject.StrUtils.splitSmart("onPassword=", ' ', false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Subject.StrUtils.split("#", 'A');
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[8];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-1), 6, intArray0, subject_PrimUtils_IntComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 8
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort(3, 39, intArray0, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 1
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[8];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, true, false).when(subject_PrimUtils_IntComparator0).lessThan(anyInt() , anyInt());
      Subject.PrimUtils.sort(1, 6, intArray0, subject_PrimUtils_IntComparator0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-1192), 0, (int[]) null, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      subject_HeapSort0.sort(subject_IndexedSortable0, 294, 532, (Subject.Progressable) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn(510, 510, (-2531), 510, (-869)).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      Subject.Progressable subject_Progressable0 = mock(Subject.Progressable.class, new ViolatedAssumptionAnswer());
      subject_HeapSort0.sort(subject_IndexedSortable0, 2317, 2809, subject_Progressable0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("comp5111.assignment.cut.Subject$Check");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"comp5111.assignment.cut.Subject$Chec\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("@8Rk| GreE^N&g#r2=M");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@8Rk| GreE^N&g#r2=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("-FTnm)Z~Kg?dm");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-FTnm)Z~Kg?d\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("SK");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"S\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.push(object0);
      linkedList0.offerFirst(object0);
      String string0 = Subject.StringUtils.join("", (List<?>) linkedList0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("e=E5(4", "f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("Th4e", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("", "searchFor");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = Subject.StringUtils.join(stringArray0, "s");
      assertEquals("nullsnullsnullsnullsnull", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Subject.StringUtils.join(stringArray0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Subject.StringUtils.join((String[]) null, "5@0y.");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Subject.StringUtils.replaceOnce("Xx_bd0c h$&#=,L", "Xx_bd0c h$&#=,L", "Xx_bd0c h$&#=,L");
      assertEquals("Xx_bd0c h$&#=,L", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("stridgToSBiplit", "stridgToSBiplit", "ep^|4%");
      assertEquals("ep^|4%", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("_k=h", "_k=h", "_k=h", 3043);
      assertEquals("_k=h", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("a(cZW3qJ#\"w1!N", "_", "strid", 0);
      assertEquals("a(cZW3qJ#\"w1!N", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Subject.StringUtils.replace(">QmzM)jo^$oU+3bbPX1", "712<@T_O7kaV{W`;", (String) null);
      assertNotNull(string0);
      assertEquals(">QmzM)jo^$oU+3bbPX1", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("&3j9\"b@E_BN0Ur|cn^", "&3j9\"b@E_BN0Ur|cn^");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("eP:#FF$o(+Pvm", "\"");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("yesK</q#8wq(<<{,Hd7jlK", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("~f+tu", "'dY?zuoM[ENEiX8#");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("comp5111.assignment.cut.Subject$StringUtils", "onRCb\"]");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("u%0z", "\"\":LGK=ziO1n6/qpnfAK");
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("s", (String) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("&", "~h x=NwA");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("TyDT]4|}x>", "QLMp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("TyD[]4|}>", "QLMp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("5T-", "5T-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("U7yA!t+\"&x,S", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("'", "'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '>';
      String string0 = Subject.StringUtils.trimEnd("jZ@}q~b{>", charArray0);
      assertEquals("jZ@}q~b{", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = Subject.StringUtils.trimEnd("1Px=lb<ics2V", charArray0);
      assertEquals("1Px=lb<ics2V", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = Subject.StringUtils.trimEnd("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("yUz*1) +DlWT><Ua-", '-');
      assertEquals("yUz*1) +DlWT><Ua", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("", ',');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("-,[,] or & a(eUnot 7llowed in-conjunction with other delimitMrs ");
      assertEquals("-,[,] or & a(eUnot 7llowed in-conjunction with other delimitMrs", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("TtSz#Tqdg&p");
      assertEquals("TtSz#Tqdg&p", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      String string0 = Subject.StringUtils.trimBegin(".7!Tp0lL<6*4fE>", charArray0);
      assertEquals("7!Tp0lL<6*4fE>", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = Subject.StringUtils.trimBegin("&3j9\"b@E_BN0Ur|cn^", charArray0);
      assertEquals("&3j9\"b@E_BN0Ur|cn^", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = Subject.StringUtils.trimBegin("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("onPassword=", 'o');
      assertEquals("nPassword=", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("Passw", '_');
      assertEquals("Passw", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("", '$');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin(" )8N6");
      assertEquals(")8N6", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("&~%");
      assertEquals("~%", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("M/&l5`UJ?Cy&)@/i");
      assertEquals("M/l5`UJ?Cy)@/i", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("/LDR-!*fHs:ys&");
      assertEquals("/LDR-!*fHs:ys&", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("t<bhbLZ]123q&2");
      assertEquals("t<bhbLZ]123q2", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("Fkn!{k gKcG$&");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("&3j9\"b@E_BN0Ur|cn^");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("l");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("e=E5(4");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("1?I%l*|-5KFNCT", 1);
      assertEquals("1?I%l*|-5K...", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString((String) null, 35);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("n", 1706);
      assertEquals("n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false, "=VD;NQ+e{/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // =VD;NQ+e{/
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notEmpty("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must not be false
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("D7/0", "");
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) stringArray0, "qh8[TN?NjzR=m(rWY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // qh8[TN?NjzR=m(rWY must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) null, "' ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // '  must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Subject.Check.notNullOrEmpty(objectArray0, "e^|4%");
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = Subject.StringUtils.replaceOnce("R:0pJN U", "", "R:0pJN U");
      Subject.Check.notNullOrEmpty("R:0pJN U", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((String) null, "nt43``Shio=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // nt43``Shio= must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty("", "FPa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FPa must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Subject.Check.notEmpty("XaEx&9E", "");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Subject.Check.notEmpty((String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = Subject.BooleanUtils.toString((Boolean) null, "\"ISGkX`z.cCd", "\"ISGkX`z.cCd", "\"ISGkX`z.cCd");
      assertEquals("\"ISGkX`z.cCd", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("on");
      assertNotNull(boolean0);
      
      String string0 = Subject.BooleanUtils.toString(boolean0, "on", ".au&0G", "on");
      assertEquals("on", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      assertTrue(boolean0);
      
      int int0 = Subject.BooleanUtils.toInteger(boolean0, 1, 1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger((Boolean) null, (-222), (-222), (-222));
      assertEquals((-222), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      int int0 = Subject.BooleanUtils.toInteger(boolean0, (-2458), 98, 84);
      assertEquals(98, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true, 0, 111);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false, 3806, 3806);
      assertEquals(3806, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject("Z{J", "IP08{uO)W!", "IP08{uO)W!", "IP08{uO)W!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(":PV|c\"8_lTzO]0 G", ".au&0G", ":PV|c\"8_lTzO]0 G", ":PV|c\"8_lTzO]0 G");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("yesR|", "The Integer did not match either specified value", "onR|", "yesR|");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((String) null, "[0%bQ/j{nK!Wr@Q", ")Q2wU=@^", "[0%bQ/j{nK!Wr@Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, "rm/Te", "", (String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, (String) null, (String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("!f$t");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("F1V^");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("TSW;");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("off");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("O7[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("yes");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("YF`");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("yeL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("ND");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("O[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("0");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("G");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("f");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("N");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("n");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("1");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }
}
