/*
 * This file was automatically generated by EvoSuite
 * Wed May 18 13:16:47 GMT 2022
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.util.Arrays;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Subject_FaultRevealing3_ESTest extends Subject_FaultRevealing3_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool("no", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool("offsear", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool("false", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool("yes", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool("onoff", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool("truesear", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool("yGP7", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool((String) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBoolean("The Integer did not match any specified value");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBoolean("t<a");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBoolean("1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBoolean("M[Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitFileNames("");
      List<String> list1 = Subject.StrUtils.toLower(list0);
      assertTrue(list1.contains(""));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitWS("yesr>xlK\r+yI'[b^t:'", true);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitWS("", false);
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitWS(" &-FVmA}7KT8t", true);
      assertFalse(list0.contains(" &-FVmA}7KT8t"));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitFileNames((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.split("false T[>g\"cG?Zc(}lwr", 'o');
      assertTrue(list0.contains("false T[>g\"cG?Zc(}lwr"));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.split("'/'?A^L{]gRDb|", '<');
      assertTrue(list0.contains("'/'?A^L{]gRDb|"));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitSmart("", 'r', true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitSmart("Fe6hQBI|wy|?", 'r', false);
      Subject.StrUtils.splitSmart("\"retx", 'r', list0);
      assertEquals(2, list0.size());
      assertTrue(list0.contains("Fe6hQBI|wy|?"));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.split(",RDt4JJOv3wFr[", '%');
      assertFalse(list0.contains(",RDt4JJOv3wFr["));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-1185), 0, intArray0, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1185 out of bounds for length 1
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[7];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-1), 6, intArray0, subject_PrimUtils_IntComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 7
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[4];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false).when(subject_PrimUtils_IntComparator0).lessThan(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort(0, 6, intArray0, subject_PrimUtils_IntComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[2];
      Subject.PrimUtils.sort((-1), (-1), intArray0, (Subject.PrimUtils.IntComparator) null);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort(0, 40, (int[]) null, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 2429, (-700), (-1), (-1739)).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      Subject.Progressable subject_Progressable0 = mock(Subject.Progressable.class, new ViolatedAssumptionAnswer());
      subject_HeapSort0.sort(subject_IndexedSortable0, (-1546), (-1481), subject_Progressable0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn((-1185), 0, (-1185), 49, 1529).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      Subject.Progressable subject_Progressable0 = mock(Subject.Progressable.class, new ViolatedAssumptionAnswer());
      subject_HeapSort0.sort(subject_IndexedSortable0, (-4), 51, subject_Progressable0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("km;Qjw?m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"km;Qjw?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("comp5111.assignment.cut.Subject$Check");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"comp5111.assignment.cut.Subject$Chec\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("ZP5M");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ZP5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("onof");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"onof\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("rklK");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"rkl\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = new Integer(0);
      List<Object> list0 = List.of((Object) integer0, (Object) "'^>", (Object) integer0, (Object) integer0);
      String string0 = Subject.StringUtils.join("S13_B=z90Fk{b", list0);
      assertEquals("0S13_B=z90Fk{b'^>S13_B=z90Fk{b0S13_B=z90Fk{b0", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("'/'?A^L{]gRDb|", "*h*]^>'u(yw@:O;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Subject.StringUtils.join(stringArray0, "G");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = Subject.StringUtils.join(stringArray0, "yG>PL7");
      assertEquals("nullyG>PL7nullyG>PL7nullyG>PL7nullyG>PL7nullyG>PL7nullyG>PL7null", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = Subject.StringUtils.join((String[]) null, "Z");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Subject.StringUtils.replace(":!Eb1[/+a[f_Hy^", ":!Eb1[/+a[f_Hy^", ":!Eb1[/+a[f_Hy^", 111);
      assertEquals(":!Eb1[/+a[f_Hy^", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("The Integer did not match either specified value", "The Integer did not match either specified value", "g&KRE", (-891));
      assertEquals("g&KRE", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("comp5111.assignment.cut.Subject$Check", "comp5111.assignment.cut.Subject$Check", "ZDxU]`01hh~I4", 0);
      assertEquals("comp5111.assignment.cut.Subject$Check", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("...", "...", (String) null, (-93));
      assertEquals("...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Subject.StringUtils.replaceOnce("~+p@~@U", (String) null, "~+p@~@U");
      assertNotNull(string0);
      assertEquals("~+p@~@U", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("", "", "", (-542));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "off0 ";
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "off0 ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("]Q1XeUo%A}BEyp!@+", "]Q1XeUo%A}BEyp!@+");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("(?<!\\),", "NiB");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("searchString", "The Integer did not match any specified value");
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("y", "'^>'");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("G", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("yGP7", "\"regex");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("yGP", "yGP");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("The Integer did not match any specified value", (String) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("&", "`0p2UNx7j+b");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("a@|L]>/]O2WZF", ":ygS9|('e\"%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split(".[", ".[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("nK-59", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("on\".S", "offK9w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("$*YU'j6wU6a}4", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("searchString", "'^>");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      String string0 = Subject.StringUtils.trimEnd("Uih7D`*;}n", charArray0);
      assertEquals("Uih7D`*;}", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = Subject.StringUtils.trimEnd("Uih7D`*;}n", charArray0);
      assertEquals("Uih7D`*;}n", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = Subject.StringUtils.trimEnd("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("no", 'o');
      assertEquals("n", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("yG>PL7", 'r');
      assertEquals("yG>PL7", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("", 'W');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("true    ");
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("yG>PL7");
      assertEquals("yG>PL7", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = '0';
      String string0 = Subject.StringUtils.trimBegin("0EL@)B ", charArray0);
      assertEquals("EL@)B ", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = Subject.StringUtils.trimBegin("comp5111.assignment.cut.Subject$BooleanUtils", charArray0);
      assertEquals("comp5111.assignment.cut.Subject$BooleanUtils", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = Subject.StringUtils.trimBegin("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("2s93nc\u0007Ilq", '2');
      assertEquals("s93nc\u0007Ilq", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("'U", 'r');
      assertEquals("'U", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("", 'h');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("\t");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("...");
      assertEquals("...", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("&amp;");
      assertEquals("amp;", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("l^&;q#.4r?B9");
      assertEquals("l^;q#.4r?B9", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("7wMo5A/&");
      assertEquals("7wMo5A/&", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("e<yx&Z!g00U/}?O*&O");
      assertEquals("e<yxZ!g00U/}?O*O", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("y");
      assertEquals("y", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("'/&%");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("X)&");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("AccountKey=");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("comp5111.assignment.cut.Subject$BooleanUtils", 1);
      assertEquals("comp5111.a...", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("", 91);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString((String) null, (-1319));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false, "Pwd=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pwd=
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Subject.Check.isTrue(true);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Subject.Check.notNullOrEmpty(objectArray0, (String) null);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         //  must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) stringArray0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // argument must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Subject.Check.notNullOrEmpty("searchString", "'^>");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Subject.Check.notEmpty("5`>1o'e{", "r-A\"ezF");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notEmpty("", "comp5111.ssignment.cut.Subject$UrlUtils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // comp5111.ssignment.cut.Subject$UrlUtils must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Subject.Check.notEmpty((String) null, "jvm9ZKG'9 Hb`4CD&H ");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.trimBegin((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // s must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(0, 0, 0, 0);
      String string0 = Subject.BooleanUtils.toString(boolean0, "iqx>-u0P", "bv*", "AaGM''W");
      assertEquals("iqx>-u0P", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = Subject.BooleanUtils.toString((Boolean) null, "'^>", "'^>", "'^>");
      assertEquals("'^>", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String string0 = Subject.BooleanUtils.toString(boolean0, "", "$h8 [bqHNq}B", "5");
      assertEquals("$h8 [bqHNq}B", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      int int0 = Subject.BooleanUtils.toInteger(boolean0, 2081, (-4), 1);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger((Boolean) null, 2591, (-1546), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((-1), (-1), (-1), 49);
      int int0 = Subject.BooleanUtils.toInteger(boolean0, 1529, 233, (-1546));
      assertEquals(1529, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true, 10, (-2234));
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false, 116, (-4));
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject("-,[,] or & are not allowed in-conjunction witD other deliniters ", "-,[,] or & are not allowed in-conjunction witD other deliniters", "comp5111.assignment.cut.Subject$PrimUtils$IntComparator", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("]r0ybI7", (String) null, "]r0ybI7", "#GDex9wCBG`\"T G>uH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("*[h1%yy8", (String) null, (String) null, "*[h1%yy8");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((String) null, "^\u0000>", "^\u0000>", "^\u0000>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, ":S*<jkP&/", (String) null, "QT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, (String) null, (String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, "yG>PL7", "@<QA:BRyPy!@\"xE", (String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("[Ukz?");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("tryP");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("The ");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("off");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("Od5");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("yG>");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("yes");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("no");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("oI");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("n+");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("F");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("e");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("N");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("n");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("f");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("T");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("t");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("Y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("y");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("F7!z'");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("1");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer integer0 = new Integer(529);
      Integer integer1 = new Integer((-2341));
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject(integer0, integer1, integer1, integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-66));
      Integer integer1 = new Integer(3986);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer1, integer0, integer1, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-4338));
      Integer integer1 = new Integer(661);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, integer1, integer1, integer0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-2260));
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((Integer) null, integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Integer integer0 = new Integer((-1369));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, integer0, integer0, (Integer) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Integer integer0 = Integer.getInteger("S[J.o7I=l}RR\"%tR/");
      Integer integer1 = new Integer((-1369));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, integer1, integer0, (Integer) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, (Integer) null, (Integer) null, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, integer0, integer0, (Integer) null);
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Integer integer0 = new Integer(845);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject(69, (-304), 177, 78);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((-222), 1421, (-222), (-286));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(726, 1, (-6), 726);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(",/k[E~CwbX^U9!E1", ",/k[E~CwbX^U9!E1", "jvm9ZKG'9 Hb`4CD&H ", "jvm9ZKG'9 Hb`4CD&H ");
      boolean boolean1 = Subject.BooleanUtils.toBooleanDefaultIfNull(boolean0, true);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean("f71BZ'{y\u0002", "on0 ", "yGP7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("'^>", "'^>", "'^>");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((String) null, "!f!?(X4h'", "!f!?(X4h'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("w4wI~x2^r", (String) null, "w4wI~x2^r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("", "", "vV'Y&L>\"AXy1~");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("AccountKey=", "comp5111.assignment.cut.Subject$UrlUtils", "AccountKey=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("on");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(3270);
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean(integer0, integer1, integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Integer integer0 = new Integer((-418));
      boolean boolean0 = Subject.BooleanUtils.toBoolean(integer0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Integer integer0 = new Integer(0);
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Integer) null, integer0, (Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Integer integer0 = new Integer(33);
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Integer) null, (Integer) null, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((Integer) null, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean(115, (-884), (-884));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(92, 92, 92);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(207, 79, 207);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(64);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("\"");
      Boolean boolean1 = Subject.BooleanUtils.negate(boolean0);
      boolean boolean2 = Subject.BooleanUtils.toBoolean(boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      boolean boolean1 = Subject.BooleanUtils.toBoolean(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Boolean) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((-2215));
      Boolean boolean1 = Subject.BooleanUtils.negate(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.negate((Boolean) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.isNotTrue((Boolean) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(1);
      boolean boolean1 = Subject.BooleanUtils.isNotTrue(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      boolean boolean1 = Subject.BooleanUtils.isNotFalse(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(false, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(true, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(true, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = Subject.UrlUtils.arrayToString(stringArray0);
      assertEquals("null,null,null", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Subject subject0 = new Subject();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Subject.StrUtils subject_StrUtils0 = new Subject.StrUtils();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = Subject.StringUtils.replaceOnce("Q", "Q", "Q");
      assertEquals("Q", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.pad("...", (-1), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = Subject.StringUtils.pad("UTF-8", 70);
      assertEquals("UTF-8                                                                 ", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.containsIgnoreCase("l", "l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Subject.StringUtils subject_StringUtils0 = new Subject.StringUtils();
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Integer) subject_StringUtils0.MAX_COMMENT_DISPLAY_LENGTH, (Integer) subject_StringUtils0.MNEMONIC_INDEX_NONE, (Integer) subject_StringUtils0.MAX_COMMENT_DISPLAY_LENGTH);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = Subject.StringUtils.escapeXml("_F'AO");
      assertEquals("_F'AO", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Subject.StringUtils.pad((Number) (-1), 0, 'd');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine("hN;F.|aHf@");
      assertEquals("hN;F.|aHf@", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((-2215));
      boolean boolean1 = Subject.BooleanUtils.isNotFalse(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Subject.BooleanUtils subject_BooleanUtils0 = new Subject.BooleanUtils();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      boolean[] booleanArray0 = Subject.BooleanUtils.primitiveValues();
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Boolean[] booleanArray0 = Subject.BooleanUtils.booleanValues();
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must not be false
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Subject.UrlUtils subject_UrlUtils0 = new Subject.UrlUtils();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, (-1477), (-1207), 0).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      subject_HeapSort0.sort(subject_IndexedSortable0, (-1477), 0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Subject.PrimUtils subject_PrimUtils0 = new Subject.PrimUtils();
  }
}
