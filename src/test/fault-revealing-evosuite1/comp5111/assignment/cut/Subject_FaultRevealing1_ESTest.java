/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 08 12:18:36 GMT 2022
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Subject_FaultRevealing1_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Subject.StrUtils.parseBool("no", true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Subject.StrUtils.parseBool("offQl'hC[]l", false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Subject.StrUtils.parseBool("false", false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Subject.StrUtils.parseBool("*VuWrZC54ogg,j", false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Subject.StrUtils.parseBool("onThe Integer did not match either specified value", false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Subject.StrUtils.parseBool("true", false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Subject.StrUtils.parseBool("yes97H&%'Es+", false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Subject.StrUtils.parseBool((String) null, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Subject.StrUtils.parseBoolean("The String did not match any specified value");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Subject.StrUtils.parseBoolean("truefalse");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Subject.StrUtils.parseBoolean("1k$@CS ");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Subject.StrUtils.parseBoolean(";O~x7omeqrA/GP");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Subject.StrUtils.parseBoolean("");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Subject.StrUtils.splitWS("onZ(v\t|z:z=UU^f", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Subject.StrUtils.splitWS("D!7:$e\r", true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Subject.StrUtils.splitWS(" M}eA5", true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Subject.StrUtils.splitFileNames((String) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Subject.StrUtils.splitFileNames("U>/:%%Lz");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject.StrUtils.splitSmart("u:@m.\";k`y-ssX1WF", 'F', (List<String>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.split("'}z$+yi'N", 'k');
      Subject.StrUtils.toLower(list0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitWS("YEt8r$d\";", false);
      Subject.StrUtils.splitSmart("YEt8r$d\";", 'y', list0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Subject.StrUtils.splitSmart("", 'J', true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Subject.StrUtils.splitSmart("*8}w^@D0?u$", 'm', false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Subject.StrUtils.split("#h3^sD", '{');
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort(84, 120, intArray0, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 84 out of bounds for length 0
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-108), 82, (int[]) null, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[7];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, true, true).when(subject_PrimUtils_IntComparator0).lessThan(anyInt() , anyInt());
      Subject.PrimUtils.sort(0, 6, intArray0, subject_PrimUtils_IntComparator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-1), 6, intArray0, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 9
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      subject_HeapSort0.sort(subject_IndexedSortable0, 1, 1064, (Subject.Progressable) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn((-4138), (-4138), 0, 0, (-4138)).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      Subject.Progressable subject_Progressable0 = mock(Subject.Progressable.class, new ViolatedAssumptionAnswer());
      subject_HeapSort0.sort(subject_IndexedSortable0, (-1085), (-615), subject_Progressable0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn((-318), (-1510), (-1510), 116, 116).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      Subject.Progressable subject_Progressable0 = mock(Subject.Progressable.class, new ViolatedAssumptionAnswer());
      subject_HeapSort0.sort(subject_IndexedSortable0, (-1510), (-1337), subject_Progressable0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("&EBYYKv%!Lm");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"&EBYYKv%!L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("comp5111.assignment.cut.Subject$Check");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"comp5111.assignment.cut.Subject$Chec\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("pUDNy)B*jnV}M");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"pUDNy)B*jnV}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("yes97H&%'Es+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yes97H&%'Es+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("'xK");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'x\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      linkedList0.offerLast(integer0);
      linkedList0.add(integer0);
      String string0 = Subject.StringUtils.join("zmGnhv", (List<?>) linkedList0);
      assertEquals("-1zmGnhv-1", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("<", "0*Yfc'V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("comp5111.assignment.cut.Subject$PrimUtils$IntComparator", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("h;'", "h;'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = Subject.StringUtils.join(stringArray0, "");
      assertEquals("nullnullnullnullnullnull", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Subject.StringUtils.join(stringArray0, "H&EkjAq3Ix'cr:<5");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Subject.StringUtils.join((String[]) null, "td5{0=J#i2?L@!0");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Subject.StringUtils.replace(";'r!T", ";'r!T", ";'r!T", 2740);
      assertEquals(";'r!T", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("tGE[E<lO,i[!@(,(C", "tGE[E<lO,i[!@(,(C", "_bC((Cc<pJ%_&di");
      assertEquals("_bC((Cc<pJ%_&di", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("Q'cX1+|inY7kIsfC<", "The Integer did not match either specified value", "The Integer did not match either specified value", 0);
      assertEquals("Q'cX1+|inY7kIsfC<", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("ja", "M3@j)26gm", (String) null, 54);
      assertEquals("ja", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("tGE[E<lO,i[!@(,(C", (String) null, "_bC((Cc<pJ%_&di");
      assertNotNull(string0);
      assertEquals("tGE[E<lO,i[!@(,(C", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Subject.StringUtils.replace((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "*8}w^@D0?u$";
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "*8}w^@D0?u$");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "*(0+;4N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties(",D]", ",D");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("Wag", "");
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("y0s", "'y");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("Pwd=", "\"\"8)*k");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("yes", "\"Xqct5@git");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("WaL", "'gT)M3>#; \"4O`^");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("Ffe2NjT2FoQ/y8@m", (String) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("R4Nd6@cJ6<~abCgU", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("yesN0pD!] feM%", "yesN0pD!] feM%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("N[", "N[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("(Y<hCR%1kogG-m", "b*PCs{<VJ~e@?i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("\"^", "\"^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("h*>aN)neQ[y ,k'O|", "h*>aN)neQ[y ,k'O|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("", "*V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("&", "&");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = Subject.StringUtils.trimEnd("u\"y?Q)M,?", charArray0);
      assertEquals("u\"y?Q)M,?", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '[';
      String string0 = Subject.StringUtils.trimEnd("[", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("(Y<hCR%1kogG-m3", '3');
      assertEquals("(Y<hCR%1kogG-m", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("1H6F*ORbY(%\"+$^{4", '1');
      assertEquals("1H6F*ORbY(%\"+$^{4", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("", '1');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("-,[,g Ir & are no1 aXlpBed in-cHnjunctiQn With other d:limites ");
      assertEquals("-,[,g Ir & are no1 aXlpBed in-cHnjunctiQn With other d:limites", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("no");
      assertEquals("no", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = '\'';
      String string0 = Subject.StringUtils.trimBegin("'}z$+yi'N", charArray0);
      assertEquals("}z$+yi'N", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = Subject.StringUtils.trimBegin("'}z$+yi'N", charArray0);
      assertEquals("'}z$+yi'N", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = Subject.StringUtils.trimBegin("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("1H6F*ORbY(%\"+$^{4", '1');
      assertEquals("H6F*ORbY(%\"+$^{4", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("", '0');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("@IY!Ah_d=");
      assertEquals("@IY!Ah_d=", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("    ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("&(.3%");
      assertEquals("(.3%", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("_(<v&h~wk&eb-(w|v");
      assertEquals("_(<vh~wkeb-(w|v", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("&&(+seScph,\"ma-'Im");
      assertEquals("&(+seScph,\"ma-'Im", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic(".{q==2{}8`%y4&");
      assertEquals(".{q==2{}8`%y4&", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("E|&C");
      assertEquals("E|C", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("&");
      assertNotNull(string0);
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("ig8OJ@k5&");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("H-?&Vix5Z*\"\"");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("\"Z5P]m;p");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("Pn", 1131);
      assertEquals("Pn", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString((String) null, 120);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("H&EkjAq3Ix'cr:<5", (-1000));
      assertNotNull(string0);
      assertEquals("H&EkjAq3I...", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must not be false
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false, "=6V}fs~7V`;3o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // =6V}fs~7V`;3o
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Subject.Check.notNullOrEmpty(objectArray0, "yesh;'");
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         //  must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty(objectArray0, "6~t7<{~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6~t7<{~ must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty("", "u9d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // u9d must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // argument must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Subject.Check.notNullOrEmpty("#h3^sD", "k");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notEmpty("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Subject.Check.notEmpty("onThe Integer did not match either specified value", "UTF-8");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Subject.Check.notEmpty((String) null, "no");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.trimEnd((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // s must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String string0 = Subject.BooleanUtils.toString(boolean0, "fp$W.%5!-}E", "fp$W.%5!-}E", (String) null);
      assertEquals("fp$W.%5!-}E", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = Subject.BooleanUtils.toString((Boolean) null, "u9d", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      int int0 = Subject.BooleanUtils.toInteger(boolean0, 1889, 1889, 1889);
      assertEquals(1889, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger((Boolean) null, (-1), (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      int int0 = Subject.BooleanUtils.toInteger(boolean0, 5, 711, 5);
      assertEquals(711, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false, (-500), (-500));
      assertEquals((-500), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("IJ1(8k>Ws[2~sR0r", "L#r", "L#r", "IJ1(8k>Ws[2~sR0r");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("QGwOG", "", "QGwOG", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject("", (String) null, "off", "comp5111.assignment.cut.Subject$Check");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((String) null, "", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, "d%q[cTLv/", (String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, (String) null, "?GNs", "?GNs");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, "s`J", "s`J", (String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("Vd$x}");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("TFm.");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("S(YT");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("O)I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("off");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("WaL");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("yes");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("no");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("OS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("on");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("F");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("f");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }
}
